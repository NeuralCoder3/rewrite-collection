%--------------------------------------------------------------------------
% File     : RNG010-5 : TPTP v2.4.1. Bugfixed v2.3.0.
% Domain   : Ring Theory (Right alternative)
% Problem  : Skew symmetry of the auxilliary function
% Version  : [Ove90] (equality) axioms :
%            Incomplete > Augmented > Incomplete.
% English  : The three Moufang identities imply the skew symmetry 
%            of s(W,X,Y,Z) = (W*X,Y,Z) - X*(W,Y,Z) - (X,Y,Z)*W.
%            Recall that skew symmetry means that the function sign 
%            changes when any two arguments are swapped. This problem 
%            proves the case for swapping the first two arguments.

% Refs     : [Ove90] Overbeek (1990), ATP competition announced at CADE-10
%          : [Ove93] Overbeek (1993), The CADE-11 Competitions: A Personal 
%          : [LM93]  Lusk & McCune (1993), Uniform Strategies: The CADE-11 
%          : [Zha93] Zhang (1993), Automated Proofs of Equality Problems in
% Source   : [Ove90]
% Names    : CADE-11 Competition Eq-9 [Ove90]
%          : THEOREM EQ-9 [LM93]
%          : PROBLEM 9 [Zha93]

% Status   : unknown
% Rating   : 1.00 v2.3.0
% Syntax   : Number of clauses    :   27 (   0 non-Horn;  27 unit;   2 RR)
%            Number of literals   :   27 (  27 equality)
%            Maximal clause size  :    1 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :   11 (   5 constant; 0-4 arity)
%            Number of variables  :   52 (   2 singleton)
%            Maximal term depth   :    6 (   2 average)

% Comments : I copied this directly. I think the Moufang identities may 
%            be wrong. At least they're in another form.
%          : Yes, now they known to be wrong, and bugfixed in v2.3.0.
%          : tptp2X -f waldmeister -t rm_equality:rstfp RNG010-5.p 
% Bugfixes : v2.3.0 - Clauses right_moufang and left_moufang fixed.
%--------------------------------------------------------------------------

NAME            Unknown

MODE            PROOF

SORTS           ANY

SIGNATURE       a: -> ANY
                add: ANY ANY -> ANY
                additive_identity: -> ANY
                additive_inverse: ANY -> ANY
                associator: ANY ANY ANY -> ANY
                b: -> ANY
                c: -> ANY
                commutator: ANY ANY -> ANY
                d: -> ANY
                multiply: ANY ANY -> ANY
                s: ANY ANY ANY ANY -> ANY

ORDERING        KBO
                additive_inverse=1, add=1, commutator=1, multiply=1, associator=1, s=1, additive_identity=1, d=1, c=1, b=1, a=1
                additive_inverse > add > commutator > multiply > associator > s > additive_identity > d > c > b > a

VARIABLES       X,Y,Z,W: ANY

EQUATIONS       additive_inverse(additive_inverse(X)) = X   % additive_inverse_additive_inverse
                additive_inverse(additive_identity) = additive_identity   % additive_inverse_identity
                add(add(X, Y), Z) = add(X, add(Y, Z))   % associative_addition
                associator(X, Y, Z) = add(multiply(multiply(X, Y), Z), additive_inverse(multiply(X, multiply(Y, Z))))   % associator
                add(X, Y) = add(Y, X)   % commutative_addition
                commutator(X, Y) = add(multiply(Y, X), additive_inverse(multiply(X, Y)))   % commutator
                s(W, X, Y, Z) = add(add(associator(multiply(W, X), Y, Z), additive_inverse(multiply(X, associator(W, Y, Z)))), additive_inverse(multiply(associator(X, Y, Z), W)))   % defines_s
                multiply(X, add(Y, Z)) = add(multiply(X, Y), multiply(X, Z))   % distribute1
                multiply(add(X, Y), Z) = add(multiply(X, Z), multiply(Y, Z))   % distribute2
                additive_inverse(add(X, Y)) = add(additive_inverse(X), additive_inverse(Y))   % distribute_additive_inverse
                add(additive_inverse(X), X) = additive_identity   % left_additive_inverse
                multiply(multiply(X, X), Y) = multiply(X, multiply(X, Y))   % left_alternative
                add(additive_identity, X) = X   % left_identity
                multiply(multiply(X, multiply(Y, X)), Z) = multiply(X, multiply(Y, multiply(X, Z)))   % left_moufang
                multiply(multiply(associator(X, X, Y), X), associator(X, X, Y)) = additive_identity   % middle_associator
                multiply(multiply(X, Y), multiply(Z, X)) = multiply(multiply(X, multiply(Y, Z)), X)   % middle_moufang
                multiply(X, additive_identity) = additive_identity   % multiply_additive_id1
                multiply(additive_identity, X) = additive_identity   % multiply_additive_id2
                multiply(X, additive_inverse(Y)) = additive_inverse(multiply(X, Y))   % multiply_additive_inverse1
                multiply(additive_inverse(X), Y) = additive_inverse(multiply(X, Y))   % multiply_additive_inverse2
                multiply(additive_inverse(X), additive_inverse(Y)) = multiply(X, Y)   % product_of_inverse
                add(X, add(additive_inverse(X), Y)) = Y   % property_of_inverse_and_add
                add(X, additive_inverse(X)) = additive_identity   % right_additive_inverse
                multiply(multiply(X, Y), Y) = multiply(X, multiply(Y, Y))   % right_alternative
                add(X, additive_identity) = X   % right_identity
                multiply(Z, multiply(X, multiply(Y, X))) = multiply(multiply(multiply(Z, X), Y), X)   % right_moufang

CONCLUSION      s(a, b, c, d) = additive_inverse(s(b, a, c, d))   % prove_skew_symmetry
%--------------------------------------------------------------------------
