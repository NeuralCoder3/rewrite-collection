%--------------------------------------------------------------------------
% File     : ROB004-1 : TPTP v2.4.1. Released v1.0.0.
% Domain   : Robbins Algebra
% Problem  : c = -d, c + d=d, and c + c=c => Boolean
% Version  : [Win90] (equality) axioms.
% English  : If there exist c, d such that c = -d, c+d=d, and c+c=c, then 
%            the algebra is Boolean.

% Refs     : [HMT71] Henkin et al. (1971), Cylindrical Algebras
%          : [Win90] Winker (1990), Robbins Algebra: Conditions that make a
% Source   : [Win90]
% Names    : Lemma 2.3 [Win90]

% Status   : unsatisfiable
% Rating   : 0.00 v2.2.1, 0.22 v2.2.0, 0.29 v2.1.0, 0.38 v2.0.0
% Syntax   : Number of clauses    :    7 (   0 non-Horn;   7 unit;   4 RR)
%            Number of literals   :    7 (   7 equality)
%            Maximal clause size  :    1 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :    6 (   4 constant; 0-2 arity)
%            Number of variables  :    7 (   0 singleton)
%            Maximal term depth   :    6 (   2 average)

% Comments : Commutativity, associativity, and Huntington's axiom 
%            axiomatize Boolean algebra.
%          : tptp2X -f waldmeister -t rm_equality:rstfp ROB004-1.p 
%--------------------------------------------------------------------------

NAME            Unknown

MODE            PROOF

SORTS           ANY

SIGNATURE       a: -> ANY
                add: ANY ANY -> ANY
                b: -> ANY
                c: -> ANY
                d: -> ANY
                negate: ANY -> ANY

ORDERING        KBO
                negate=1, add=1, c=1, d=1, b=1, a=1
                negate > add > c > d > b > a

VARIABLES       X,Y,Z: ANY

EQUATIONS       add(add(X, Y), Z) = add(X, add(Y, Z))   % associativity_of_add
                add(c, c) = c   % c_plus_c_is_c
                add(c, d) = d   % c_plus_d_is_d
                add(X, Y) = add(Y, X)   % commutativity_of_add
                negate(d) = c   % negate_d_is_c
                negate(add(negate(add(X, Y)), negate(add(X, negate(Y))))) = X   % robbins_axiom

CONCLUSION      add(negate(add(a, negate(b))), negate(add(negate(a), negate(b)))) = b   % prove_huntingtons_axiom
%--------------------------------------------------------------------------
