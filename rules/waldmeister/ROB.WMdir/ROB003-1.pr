%--------------------------------------------------------------------------
% File     : ROB003-1 : TPTP v2.4.1. Released v1.0.0.
% Domain   : Robbins Algebra
% Problem  : X + c=c => Boolean
% Version  : [Win90] (equality) axioms.
% English  : If there exists c such that X+c=c, then the algebra 
%            is Boolean.

% Refs     : [HMT71] Henkin et al. (1971), Cylindrical Algebras
%          : [Win90] Winker (1990), Robbins Algebra: Conditions that make a
%          : [LW92]  Lusk & Wos (1992), Benchmark Problems in Which Equalit
% Source   : [OTTER]
% Names    : Lemma 2.2 [Win90]
%          : RA1 [LW92]
%          : robbins.in [OTTER]

% Status   : unsatisfiable
% Rating   : 0.00 v2.2.1, 0.22 v2.2.0, 0.29 v2.1.0, 0.25 v2.0.0
% Syntax   : Number of clauses    :    5 (   0 non-Horn;   5 unit;   1 RR)
%            Number of literals   :    5 (   5 equality)
%            Maximal clause size  :    1 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :    5 (   3 constant; 0-2 arity)
%            Number of variables  :    8 (   1 singleton)
%            Maximal term depth   :    6 (   2 average)

% Comments : Commutativity, associativity, and Huntington's axiom 
%            axiomatize Boolean algebra.
%          : In Overbeek's version, the hypothesis is slightly different :
%            ...an element c such that c+c=c, then... Mail from McCune says
%            that this is a simpler problem.
%          : tptp2X -f waldmeister -t rm_equality:rstfp ROB003-1.p 
%--------------------------------------------------------------------------

NAME            Unknown

MODE            PROOF

SORTS           ANY

SIGNATURE       a: -> ANY
                add: ANY ANY -> ANY
                b: -> ANY
                c: -> ANY
                negate: ANY -> ANY

ORDERING        KBO
                negate=1, add=1, c=1, b=1, a=1
                negate > add > c > b > a

VARIABLES       X,Y,Z: ANY

EQUATIONS       add(add(X, Y), Z) = add(X, add(Y, Z))   % associativity_of_add
                add(X, Y) = add(Y, X)   % commutativity_of_add
                negate(add(negate(add(X, Y)), negate(add(X, negate(Y))))) = X   % robbins_axiom
                add(X, c) = c   % there_exists_a_constant

CONCLUSION      add(negate(add(a, negate(b))), negate(add(negate(a), negate(b)))) = b   % prove_huntingtons_axiom
%--------------------------------------------------------------------------
