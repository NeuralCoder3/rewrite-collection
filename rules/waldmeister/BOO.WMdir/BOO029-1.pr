%--------------------------------------------------------------------------
% File     : BOO029-1 : TPTP v2.4.1. Released v2.2.0.
% Domain   : Boolean Algebra
% Problem  : Self-dual 2-basis from majority reduction, part 3.
% Version  : [MP96] (equality) axioms : Especial.
% English  : This is part of a proof that there exists an independent
%            self-dual-2-basis for Boolean algebra by majority reduction.

% Refs     : [McC98] McCune (1998), Email to G. Sutcliffe
%          : [MP96]  McCune & Padmanabhan (1996), Automated Deduction in Eq
% Source   : [McC98]
% Names    : DUAL-BA-5-c [MP96]

% Status   : unsatisfiable
% Rating   : 0.00 v2.2.1
% Syntax   : Number of clauses    :   11 (   0 non-Horn;  11 unit;   1 RR)
%            Number of literals   :   11 (  11 equality)
%            Maximal clause size  :    1 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :    5 (   2 constant; 0-2 arity)
%            Number of variables  :   26 (   8 singleton)
%            Maximal term depth   :    4 (   2 average)

% Comments :
%          : tptp2X -f waldmeister -t rm_equality:rstfp BOO029-1.p 
%--------------------------------------------------------------------------

NAME            Unknown

MODE            PROOF

SORTS           ANY

SIGNATURE       a: -> ANY
                add: ANY ANY -> ANY
                b: -> ANY
                inverse: ANY -> ANY
                multiply: ANY ANY -> ANY

ORDERING        KBO
                inverse=1, add=1, multiply=1, b=1, a=1
                inverse > add > multiply > b > a

VARIABLES       X,Y,Z: ANY

EQUATIONS       add(add(X, Y), Z) = add(X, add(Y, Z))   % associativity_of_add
                multiply(multiply(X, Y), Z) = multiply(X, multiply(Y, Z))   % associativity_of_multiply
                multiply(add(X, Y), add(X, inverse(Y))) = X   % b1
                add(multiply(X, Y), multiply(X, inverse(Y))) = X   % b2
                add(X, Y) = add(Y, X)   % commutativity_of_add
                multiply(X, Y) = multiply(Y, X)   % commutativity_of_multiply
                add(X, multiply(Y, multiply(X, Z))) = X   % l1
                multiply(X, add(Y, add(X, Z))) = X   % l2
                add(add(multiply(X, Y), multiply(Y, Z)), Y) = Y   % l3
                multiply(multiply(add(X, Y), add(Y, Z)), Y) = Y   % l4

CONCLUSION      add(b, inverse(b)) = add(a, inverse(a))   % prove_equal_inverse
%--------------------------------------------------------------------------
